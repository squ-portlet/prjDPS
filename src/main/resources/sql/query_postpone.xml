<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
    <comment>DPS Postponement Queries</comment>
    <entry key="dps.postpone.select.existing.grade">
		    SELECT 
					GRADE.L_ABR_CRSNO   						AS  	L_ABR_CRSNO
					, GVAL.L_ABR_GVAL   						AS  	GRADE_VAL
					, DECODE(
					          :paramLocale
					          , 'ar', A_CRSSNM
					          , CRSSNM
					)                   						AS  	COURSE_NAME
			FROM 
			      STD_GRADES  GRADE
			    , GRADE_VAL   GVAL
			    , CRS_BASIC   COURSE
			WHERE
			      GRADE.STDNO 	= 	:paramStdNo 
			  AND GRADE.CCYRCD 	= 	(SELECT CCYRCD FROM CURRENT_YR_SEM)
			  AND GRADE.SEMCD 	= 	(SELECT SEMCD FROM CURRENT_YR_SEM)
			  AND GRADE.GRADECD = 	GVAL.GRADECD
			  AND GRADE.CRSNO = 	COURSE.CRSNO
    </entry>
    <entry key="dps.postpone.select.postpone.reasons">
    	SELECT 
			CODE.SISCODECD										AS		SISCODECD	
			,DECODE 
					(
					  :paramLocale,
					  'en', CODE.CODENM, CODE.A_CODENM
					)     										AS		POSTPONE_REASON_NAME
		FROM 
		    SIS_CODES CODE,
        	SIS_CODE_TYPES CODE_TYPE
		WHERE
        		CODE.SISCODETYPCD = CODE_TYPE.SISCODETYPCD
		    AND CODE_TYPE.SISCODETYPNM = 'PST_REASON'
    </entry>
    <entry key="dps.postpone.select.student.records">
		SELECT 
		          TO_CHAR(POSTPN.CREATE_DATE,'DD/MM/YYYY')									AS		CREATE_DATE
		        , POSTPN.TOCCYRCD															AS		TOCCYRCD
		        , POSTPN.TOSEMCD															AS		SEMCD
		        , (
		            SELECT 
		                DECODE 
		                (
		                  :paramLocale,
		                  'en', SEMNM, A_SEMNM
		                )
		              FROM SEM
		              WHERE SEMCD = POSTPN.TOSEMCD
		          ) 																		AS 		SEM_NAME
		        , POSTPN.PSTREASONCD  														AS		POSTPONE_REASON_CODE
		        , DECODE
		          (
		            SISCD.L_ABR_CODE
		            ,'OTHR',POSTPN.OTHER_REASON, 
		              DECODE
		              (
		                  :paramLocale
		                  ,'en', SISCD.CODENM, SISCD.A_CODENM
		              )
		            )                                           							AS 		POSTPONE_REASON_NAME
		        , POSTPN.OTHER_REASON														AS		POSTPONE_OTHER_REASON							    
		        , POSTPN.POSTREQ_STATUSCD													AS		STATUS_CODE
		        , (
		        	SELECT
		        		L_ABR_CODE
		        	FROM SIS_CODES
		            WHERE 
		            	SISCODECD= POSTPN.POSTREQ_STATUSCD
		        	)																		AS		STATUS_CODE_NAME
		        , (
		            SELECT 
		              DECODE 
		              (
		                :paramLocale
		                ,'en', CODENM, A_CODENM
		                )
		              FROM SIS_CODES
		              WHERE SISCODECD= POSTPN.POSTREQ_STATUSCD
		            ) 																		AS 		STATUS_DESC
		       , POSTPN.COMMNT																AS		COMMENTS
		          , FUNC_APPROVE_STATUS(
	                            POSTPN.STDNO,
	                            :paramAdvisorRoleName, 
	                            :paramFormName
	                            )                           								AS  	ADVISOR_STATUS            																		
	          , FUNC_APPROVE_STATUS(
	                            POSTPN.STDNO,
	                            :paramSupervisorRoleName, 
	                            :paramFormName
	                            )                           								AS  	SUPERVISOR_STATUS
	        , FUNC_APPROVE_STATUS(
	                            POSTPN.STDNO,
	                            :paramColDeanRoleName, 
	                            :paramFormName
	                            )                           								AS  	COLLEGE_DEAN_STATUS
	        , FUNC_APPROVE_STATUS(
	                            POSTPN.STDNO,
	                            :paramDpsDeanRoleName, 
	                            :paramFormName
	                            )                           								AS  	DPS_DEAN_STATUS	 
			, FUNC_GET_APPROVALCODE(
								:paramFormName,
								:paramAdvisorRoleName
								)	                                                        AS  	ADVISOR_APPROVAL_CODE
			, FUNC_GET_APPROVALCODE(
								:paramFormName,
								:paramSupervisorRoleName
								)															AS		SUPERVISOR_APPROVAL_CODE
			, FUNC_GET_APPROVALCODE(
								:paramFormName,
								:paramColDeanRoleName
								)															AS		COLLEGE_DEAN_APPROVAL_CODE
			, FUNC_GET_APPROVALCODE(
								:paramFormName,
								:paramDpsDeanRoleName
								)															AS		DPS_DEAN_APPROVAL_CODE														               
		FROM 
		    STD_POSTPONE POSTPN,
		    SIS_CODES     SISCD
		
		WHERE
		        POSTPN.PSTREASONCD=SISCD.SISCODECD
		    AND STDNO = :paramStdNo    
    </entry>
    <entry key="dps.postpone.insert.student">
		INSERT INTO STD_POSTPONE
		(
			  STDNO 
			, STDSTATCD 
			, FROMCCYRCD 
			, FROMSEMCD 
			, TOCCYRCD 
			, TOSEMCD 
			, PSTREASONCD 
			, OTHER_REASON 
			, POSTREQ_STATUSCD 
			, CREATE_DATE 
			, CREATE_USERNAME 
		)
		VALUES 
		(
			  :paramStdNo
			, :paramStdStatCode
			, :paramFromYearCode
			, :paramFromSemCode
			, :paramToYearCode
			, :paramToSemCode
			, :paramPostponeReasonCode
			, :paramPostponeReasonOther
			, (
				SELECT
					CODES.SISCODECD	
				FROM
						SIS_CODES       CODES
					,   SIS_CODE_TYPES  TYPES
				WHERE
						CODES.SISCODETYPCD =  TYPES.SISCODETYPCD
					AND TYPES.SISCODETYPNM = 'APPROVAL_STATUS'
					AND CODES.L_ABR_CODE  = :paramPostponeStatusCode
			   )
			, SYSDATE
			, :paramUserCode 
		)    
    </entry>
    <entry key="dps.postpone.select.student.records.by.employee">
			SELECT * 
					  FROM
					(  
					    SELECT DISTINCT
					            POST.STDNO                                     	AS  STUDENT_NO
					          , PORTAL.STD_ID									AS	STUDENT_ID  
					          , DECODE
					                  (
					                      :paramLocal
					                      ,'en',PORTAL.STD_NAME
					                      , PORTAL.A_STD_NAME
					                  )                                       	AS  STUDENT_NAME        
					          , POST.STDSTATCD                                 	AS  STDSTATCD
					          , PORTAL.COHORT                                 	AS  COHORT
					          , POST.TOCCYRCD                                  	AS  TOCCYRCD                              
					          , POST.TOSEMCD                                   	AS  TOSEMCD
					          , COL.COLCENCD
					          , DECODE
					                (
					                    :paramLocal
					                    ,'en', PORTAL.DEGREE_NAME
					                    ,PORTAL.A_DEGREE_NAME
					                )                                         	AS  DEGREE_NAME
					          , DECODE 
					                (
					                      :paramLocal
					                      ,'en', PORTAL.COLLEGENM
					                      , PORTAL.A_COLLEGENM
					                )                                         	AS  COLLEGE_NAME
					          , POST.POSTREQ_STATUSCD                          	AS  STATUS_CODE
					          , (
					              SELECT 
					                  DECODE
					                  (
					                      :paramLocal
					                      ,'en', CODENM , A_CODENM
					                  )
					                  FROM
					                    SIS_CODES
					                  WHERE 
					                    SISCODECD = POST.POSTREQ_STATUSCD
					            )                                             	AS  STATUS_DESC
					          , POST.CREATE_DATE                               	AS  CREATE_DATE


	                          , FUNC_APPROVE_STATUS(
	                                              POST.STDNO,
	                                              :paramAdvisorRoleName, 
	                                              :paramFormName
	                                              )                           	AS  ADVISOR_STATUS 

                      
	                          , FUNC_APPROVE_STATUS(
	                                              POST.STDNO,
	                                              :paramSupervisorRoleName, 
	                                              :paramFormName
	                                              )                           	AS  SUPERVISOR_STATUS
	                          , FUNC_APPROVE_STATUS(
	                                              POST.STDNO,
	                                              :paramColDeanRoleName, 
	                                              :paramFormName
	                                              )                           	AS  COLLEGE_DEAN_STATUS
	                          , FUNC_APPROVE_STATUS(
	                                              POST.STDNO,
	                                              :paramDpsDeanRoleName, 
	                                              :paramFormName
	                                              )                           	AS  DPS_DEAN_STATUS
	                          ,	FUNC_IS_APPROVER(
												 		  POST.STDNO
												 		, POST.STDSTATCD
												 		, :paramFormName
												 		, :paramRoleName
												 		, :paramEmpNo
	                         						)						 	AS	IS_APPROVER
                              ,FUNC_IS_SUPERVISOR_AVAILABLE(POST.STDNO,POST.STDSTATCD)  AS 	HAS_THESIS     		                                          
                                        
					    FROM     
					          STD_POSTPONE        POST
					          ,V_STDINFO_PORTAL   PORTAL
					          ,COL_CEN            COL
					          , STD_THESIS        THESIS
					          , V_DEPT_MAJOR      DEPT_MAJ
					          , COL_DEPT          DEPT
					    WHERE
					              DEPT.COLCENCD     = COL.COLCENCD
					          AND DEPT_MAJ.DEPTNO   = DEPT.DEPTNO (+)
					          AND POST.STDNO         = PORTAL.STDNO
					          AND THESIS.STDNO(+)      = POST.STDNO 															 
					          --AND THESIS.STDNO    = PORTAL.STDNO
					          AND PORTAL.ACTIVE     = 'Y'
					          AND PORTAL.COLLEGE_CODE = COL.L_ABR_CC 
					          AND POST.POSTREQ_STATUSCD IS NOT NULL
					          AND 
					              ( 
					                      :paramColCode = COL.COLCENCD		 		--  College DEAN/ ASST DEAN
					                  OR  :paramColCode IS NULL               		-- 	DPS DEAN / DPS STAFF
					              )
					          AND
					            (
					                      :paramAdvisor = PORTAL.ADVISOR			--	ADVISOR
					                  OR  :paramAdvisor IS NULL
					            )
					          AND
					            (
					                      :paramSupervisor =  THESIS.SUPVISREMPNO	--	SUPERVISOR
					                  OR  :paramSupervisor  IS NULL
					            )
					          AND
					            (
					                      :paramDeptCode  = DEPT.DEPTNO				--	HOD
					                  OR  :paramDeptCode  IS NULL
					            )
					         AND
								(
								          :paramStdNo = POST.STDNO
								      OR  :paramStdNo IS NULL
								)
					)
					ORDER BY  CREATE_DATE DESC    
    </entry>
    <entry key="dps.postpone.update.status.student">
				UPDATE
				    STD_POSTPONE
				SET
				    POSTREQ_STATUSCD =   (
									                                SELECT
									                                    CODES.SISCODECD	
									                                FROM
									                                        SIS_CODES       CODES
									                                    ,   SIS_CODE_TYPES  TYPES
									                                WHERE
									                                        CODES.SISCODETYPCD =  TYPES.SISCODETYPCD
									                                    AND TYPES.SISCODETYPNM = 'APPROVAL_STATUS'
									                                    AND CODES.L_ABR_CODE  = :paramStatusCodeName
				                              )
				    , COMMNT			= :paramComment					                            
				    , USRACCTCD       = :paramUserName
				    , UPDDTE          = SYSDATE
				WHERE
				          STDNO     	= :paramStdNo
				      AND STDSTATCD 	= :paramStdStatCode    
    </entry>
</properties>