<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
    <comment>DPS RULES </comment>
    <entry key="sql.rule.student.join.close.time">
    	<![CDATA[
				SELECT 
						* 
				FROM
					(
					    	SELECT 
				                DISTINCT
				                SD.STDSTATCD								AS		STDSTATCD
				              , SD.STDNO									AS		STUDENT_NO
				              , D.DEGRESTSEMGRD								AS		DGR_GRAD_ESTIMATE_SEM_COUNT
				              , D.DEGRMAXSEMGRD								AS		DGR_GRAD_MAXIMUM_SEM_COUNT
				              , SG.CCYRCD								    AS		FROMCCYRCD
				              , SG.SEMCD 								    AS		FROMSEMCD
				              , TO_NUMBER(TO_CHAR(SYSDATE,'YYYY'))     		AS    	CURRENT_YEAR
				              , D.DEGRCD 
							FROM 
								  STD_DEGREE 	SD 
								, DEGREE 		D
				            	, STD_GRADES 	SG
							WHERE 
					                    SD.DEGRCD		  =	  D.DEGRCD 
					            AND     SD.STDNO      =   SG.STDNO
					            AND     SG.CCYRCD     >=  D.CCYRCD
					            AND     SD.STDNO      =	  :paramStdNo
					            AND     SD.STDSTATCD  =   :paramStdStatCode
					          ORDER BY FROMCCYRCD ASC, FROMSEMCD ASC
				 	)         
				WHERE 
				    	ROWNUM = 1
    	]]>
    </entry>
    <entry key="sql.rule.student.language.course.from.course.start">
    	<![CDATA[
				SELECT 
				        COUNT(L_ABR_CRSNO)
				FROM
				(
				
				      SELECT       SCHED.STDNO
				                , SECT.L_ABR_CRSNO
				                , SECT.CCYRCD
				                , SECT.SEMCD
				      FROM 
				                  SCHED_STD   SCHED
				            ,     SECT        SECT
				      WHERE
				                  SCHED.SECTCD  = SECT.SECTCD
				            AND   STDNO = :paramStdNo
				            AND
				                (SECT.CCYRCD >= :paramFromCourseYear AND SECT.CCYRCD <= :paramCurrentYear )
				                AND NOT (SECT.CCYRCD =  :paramFromCourseYear AND SECT.CCYRCD < :paramFromSemester)
				                
				                ORDER BY SECT.CCYRCD, SECT.SEMCD
				 ) 
				 WHERE
				    L_ABR_CRSNO LIKE 'LANC%'    
    	]]>
    </entry>
    <entry key="sql.rule.student.count.postpone">
	        SELECT
	              		COUNT(STDNO)																						AS	COUNT_REC
	        FROM
	              STD_POSTPONE
	        WHERE
	                  STDNO =  :paramStdNo
	              AND STDSTATCD = :paramStdStatCode
    </entry>
    <entry key="sql.rule.current.year.semester">
			SELECT 
			      CCYRCD																									AS	CURRENT_YEAR	 
			  	, SEMCD 																									AS	SEMCD
			FROM 
				CURRENT_YR_SEM    
    </entry>
    
	<entry key="sql.rule.decicide.year.semester">
		<![CDATA[
			SELECT 
			    COUNT(*)      																								AS COUNT_REC          
			FROM 
			    V_CURRENT_YRSEM_PORTAL VCYP
			WHERE
			    TRUNC(VCYP.SEMSTDTE +:paramNumberDays) < TRUNC(SYSDATE)
		 ]]>	
	</entry>	
		
	<entry key="sql.view.rule.current.year.semester">
			SELECT 
			        CCYRCD    																								AS  CCYRCD
			      , SEMCD																									AS  SEMCD
			FROM
			    V_YR_SEM_CURRENT	
	</entry>

	<entry key="sql.view.rule.last.year.semester">
			SELECT 
			        CCYRCD    																								AS  CCYRCD
			      , SEMCD     																								AS  SEMCD  
			FROM
			    V_YR_SEM_LAST	
	</entry>

	<entry key="sql.view.rule.last.year.semester.parameter">
		<![CDATA[
			SELECT 
		        	CCYRCD																									AS  CCYRCD
		        ,	SEMCD																									AS  SEMCD
			FROM
			(
				  SELECT 
				          *
				  FROM
				        YR_SEM YRSEM
				  WHERE
				        TRUNC(YRSEM.SEMSTDTE+:paramNumberDays) <= TRUNC(SYSDATE)
				  ORDER BY YRSEM.SEMSTDTE DESC
			)
			WHERE ROWNUM = 1
		]]> 	
	</entry>

    <entry key="sql.rule.thesis.code">
		    SELECT
				   NVL( 
				            (
				              SELECT
				                    STDTHESISCD
				              FROM 
				                  STD_THESIS T1
				              WHERE
				                  T1.STDNO     		= :paramStdNo
				                  AND T1.STDSTATCD 	= :paramStdStatCode
				            ) , 0
				        )           																						AS 	STDTHESISCD
		FROM DUAL
    </entry>
 	<entry key="sql.rule.seminar.complete.record.count">
			SELECT
			    COUNT(STDNO)																								AS	COUNT_REC
			FROM
			      THESIS_DISCUSSION   TH
			    , SIS_CODES           CODES
			WHERE
			        STDNO 				= :paramStdNo
			    AND TH.DISC_TYPE  		= CODES.SISCODECD
			    AND CODES.L_ABR_CODE 	= :paramSeminarAbrCode
			    AND STDTHESISCD 		= :paramThesisCode
			    AND
			        (
			                STATUS  IS NULL
			            OR  
				            STATUS  = (
			                              SELECT
			                                  CODE.SISCODECD
			                              FROM
			                                    SIS_CODES       CODE
			                                  , SIS_CODE_TYPES  TYPS
			                              WHERE
			                                      CODE.L_ABR_CODE 	= 'COMP'
			                                  AND CODE.SISCODETYPCD = TYPS.SISCODETYPCD
			                                  AND TYPS.SISCODETYPNM = 'THESIS_DISC_TYPE_STATUS'
			                          )
			        ) 	
 	</entry>
  	<entry key="sql.rule.current.date.in.specific.week">
		  	 SELECT 
		  	 		NVL(COUNT_REC,0)																						AS	COUNT_REC
			 FROM
				  (
				    SELECT 
				        COUNT(*) COUNT_REC
				    FROM 
				        V_CURRENT_YRSEM_PORTAL
				    WHERE
				        SYSDATE >= SEMSTDTE+((:param_week-1)*7)
				  ) 
  	</entry>
  	<entry key="sql.rule.current.date.in.specific.week.last.semester">
		  	 SELECT 
		  	 		NVL(COUNT_REC,0)																						AS	COUNT_REC
			 FROM
				  (
				    SELECT 
				        COUNT(*) COUNT_REC
				    FROM 
				        V_YR_SEM_LAST
				    WHERE
				        SYSDATE >= SEMSTDTE+((:param_week-1)*7)
				  ) 
  	</entry>

<!-- Service Specific Rules -->
		<!-- Service Rules with Extension ** 
				only one time student can extend therefore 
				student data with specific stdstatcode will be inserted once in extension table 
		-->
 	<entry key="sql.rule.service.extension.select.count.student">
     SELECT
            COUNT(EXTN.STDNO)   																							AS 	COUNT_REC
     FROM 
            STD_EXTENSION   EXTN
          , SIS_CODES       CODES
          , SIS_CODE_TYPES  TYPS
     WHERE
              EXTN.EXTREQ_STATUSCD 		= 	CODES.SISCODECD
          AND CODES.SISCODETYPCD		=	TYPS.SISCODETYPCD
          AND CODES.L_ABR_CODE IN ('ACCPT','PENDG','PRGRS','MODFY')
          AND TYPS.SISCODETYPNM 		= 'APPROVAL_STATUS'
          AND EXTN.STDNO     			= :paramStdNo
          AND EXTN.STDSTATCD			 = :paramStdStatCode
  	</entry>
  		<!-- Service Rules with Drop W ** 
				Drop with W can be done only in 'Drop with W' period 
		-->
 	<entry key="sql.rule.service.dropw.withdraw.preriod">
		SELECT 
			    DECODE 
			          (
			            COUNT(WITHIN_DATE)
			            , 0 , 'N','Y'
			          ) 																									AS 	WITHDRAW_DATE
		FROM
		(
		    SELECT
		            'Y'  AS WITHIN_DATE
		    FROM 
		     V_STD_CURREG        REG
		    WHERE 
		            REG.STDNO = :paramStdNo
		      AND   REG.STDSTATCD = :paramStdStatCode
		      AND  SYSDATE BETWEEN REG.FIRSTWTHDTE AND REG.SECONDWTHDTE
		)
	</entry>
  
  <entry key="sql.rule.service.dropw.withdraw.dates">
	    SELECT
                DISTINCT 
	              TO_CHAR(REG.FIRSTWTHDTE, 'DD-MON-YYYY HH:MM')   															AS   FIRST_WITHDRAW_DATE
	           ,  TO_CHAR(REG.SECONDWTHDTE, 'DD-MON-YYYY HH:MM')  															AS   SECOND_WITHDRAW_DATE
	    FROM
	        V_STD_CURREG        REG
	    WHERE
              REG.STDSTATCD = :paramStdStatCode 
          AND ROWNUM  = 1 
  </entry>
  
  	<entry key="sql.rule.service.is.course.thesis">
		SELECT 
		        DECODE (
		                    CNT
		                  , 0, 'N','Y'
		                )               																					AS 	IS_THESIS_COURSE
		FROM
		(
		 SELECT 
		           count(*) AS CNT
		 FROM
		      SCHED_STD SCH_STD
		    , V_CRS_TYP VCT
		 WHERE
		          SCH_STD.CRSTYPCD  = VCT.CRSTYPCD
		      AND SCH_STD.STDNO=:paramStdNo 
		      AND SCH_STD.CRSNO=:paramCourseNo
		    AND VCT.L_ABR_CRSTYP='THESI'
		)  	
  	</entry>
    
</properties>