<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd">
<properties>
    <comment>DPS Queries</comment>
    <entry key="dps.select.current.yr.sem">
    	<![CDATA[
	    	SELECT 
				  CYS.CCYRCD      															AS  	CCYRCD
				, CYS.SEMCD       															AS  	SEMCD
				, DECODE 
						  (
						    :paramLocale,
						    'en', SEM.L_ABR_SEM, A_ABR_SEM
						  )             													AS		ABR_SEM
				, DECODE
		          (
		              :paramLocale,
		              'en',SEMNM,A_SEMNM
		          )                                               							AS		SEM_NAME						          
			FROM 
			        CURRENT_YR_SEM        CYS
			      , SEM                   SEM
		      WHERE
	    	      CYS.SEMCD  = SEM.SEMCD
    	]]>
    </entry>
    <entry key="dps.select.next.yr.sem">
    	<![CDATA[
			SELECT 
			        * 
			FROM
			    (
			        SELECT 
			             YS.CCYRCD 															AS  	CCYRCD
			            , YS.SEMCD															AS  	SEMCD
			            , DECODE 
			              (
			                :paramLocale,
			                'en', SEM.L_ABR_SEM, A_ABR_SEM
			              )             													AS  	ABR_SEM
			          , DECODE
			                (
			                    :paramLocale,
			                    'en',SEMNM,A_SEMNM
			                )                                      							AS		SEM_NAME					  
			        FROM  
			              YR_SEM          YS
			            , CURRENT_YR_SEM  CYS
			            , SEM             SEM
			        WHERE 
			              	YS.SEMCD  	= 	SEM.SEMCD
			          AND 	YS.SEMCD 	<> 	3
			          AND 	YS.SEMSTDTE >=  (
			                                SELECT 
			                                  	SEMSTDTE
			                                FROM 
			                                	YR_SEM
			                                WHERE
			                                  		CCYRCD = CYS.CCYRCD
			                                  	AND SEMCD  = CYS.SEMCD
			                              	)
			          ORDER BY YS.SEMSTDTE 
			    )
			    WHERE ROWNUM < 2
    	]]>
    </entry>
    
    <entry key="dps.hrms.select.employee.detail">
    	<![CDATA[
	    	SELECT
	    		VHM_EMP_CODE 																AS		HRMS_EMP_CODE
			   	,VHM_EMP_BRAN_CODE             												AS    	HRMS_BRANCH_CODE
			  	,VHM_EMP_DEPT_CODE             												AS		HRMS_DEPT_CODE
			FROM
			  VHM_EMPLOYEE
			WHERE
			        LPAD(VHM_EMP_CODE,7,0)  =   :paramEmpNumber
			  AND   VHM_EMP_ACTIVE          =   'Y'
    	]]>
    </entry>
    
    <entry key="dps.select.employee.detail">
    	<![CDATA[
    		SELECT
	    		USR.USERNAME 																AS	 	EMPNO
				, (FAC.EMPFIRNM || ' ' || FAC.EMPTRIBLNM)									AS		EMP_NAME_EN
				, (FAC.A_EMPFIRNM || ' ' || FAC.A_EMPTRIBLNM)								AS		EMP_NAME_AR
			   	,USR.COLCENCD             												    AS		BRANCH_CODE
			  	,USR.DEPTNO             												    AS		DEPT_CODE
          		,USR.EMAIL                                      							AS    	EMP_EMAIL
			FROM
			  SIS_USERS	USR
			  ,FAC_SURNM  FAC
			WHERE
			        LTRIM(USR.USERNAME,'e') =   :paramEmpNumber
			  AND	LTRIM(USR.USERNAME,'e')	=	TO_CHAR(FAC.EMPNO)		
			  AND   USR.STATUSACTIVE          =   'Y'	
    	]]>
    </entry>
    <entry key="personal.details.of.student">
    	<![CDATA[ 
   	        SELECT     SI.STD_ID 															AS 		STUDENT_ID, 
   	                   SI.STDNO                                                          	AS	    STUDENT_NO,  
                       NVL(DECODE(:paramLocale,'en',SI.STD_NAME,SI.A_STD_NAME),'-') 		AS 		STUDENT_NAME,
                       NVL(SI.STD_NAME,'-')											 		AS 		STUDENT_NAME_ENG,
                       NVL(SI.A_STD_NAME,'-') 												AS 		STUDENT_NAME_AR,
                       NVL(DECODE(:paramLocale,'en',SI.HOME_REGION,SI.AHOME_REGION),'-') 	AS 		STUDENT_HOME_REGION,
                       NVL(DECODE(:paramLocale,'en',SI.HOME_WILLAYAT,SI.AHOME_WILAYAT),'-') AS 		STUDENT_HOME_WILAYAT,
                       NVL(DECODE(:paramLocale,'en',SI.TOWN_VILLAGE,SI.AHOME_TOWN),'-') 	AS 		STUDENT_TOWN_VILLAGE,
                       NVL(SI.HOME_POBOX,'-') 												AS 		STUDENT_HOME_POBOX,
                       NVL(SI.HOME_POSTALCD,'-') 											AS 		STUDENT_HOME_POSTALCD,
                       NVL(SI.STD_PHONE,NULL) 												AS 		STUDENT_PHONE,
                       NVL(SI.STD_EMAIL,'-') 												AS 		STUDENT_EMAIL
           FROM        V_STDINFO_PORTAL     SI         
           WHERE       (SI.STD_ID= :paramStudentId OR SI.STDNO = :paramStudentNo)
		            AND  ( 
		                          DEG_NUMBER IN (2,4,10)
		                          OR (DEG_NUMBER = 6 AND MAJOR_CODE='PODT')
		                       )
		            AND  ACTIVE = 'Y'
    	]]>
    </entry>
    <entry key="academic.details.of.student">
    	<![CDATA[
    		SELECT		SI.STD_ID													  		AS 		STUDENT_ID,    
                       	SI.STDNO                                                          	AS	    STUDENT_NO,
                       	SI.STDSTATCD														AS		STDSTATCD,
                       	DECODE(:paramLocale,'en',SI.COLLEGENM, SI.A_COLLEGENM) 			  	AS 		COLLEGE_NAME,
                       	SI.COLLEGENM										 			  	AS 		COLLEGE_NAME_ENG,
                       	SI.A_COLLEGENM										 			  	AS 		COLLEGE_NAME_AR,
                       	NVL(DECODE(:paramLocale,'en',SI.MAJORNAME, SI.A_MAJORNAME ),'') 	AS 		MAJOR_NAME, 
                       	NVL(SI.MAJORNAME,'-')												AS		MAJOR_NAME_ENG,
                       	NVL(SI.A_MAJORNAME,'-')												AS		MAJOR_NAME_AR,    
                       	SI.ADVISOR														  	AS		ADVISOR_ID,
                       	(
                          SELECT 
                              DECODE(:paramLocale,'en',ADVISOR_NAME, A_ADVISOR_NAME)
                          FROM
                              V_STDADVISOR_PORTAL
                          WHERE
                                  STD_ID = SI.STD_ID
                              AND ACTIVE = 'Y' 
                       	)                                                                  	AS 		ADVISOR_NAME,
                       	DECODE(:paramLocale,'en',SI.DEGREE_NAME, SI.A_DEGREE_NAME)			AS 		DEGREE_NAME, 
                       	SI.DEGREE_NAME														AS 		DEGREE_NAME_ENG,
                       	SI.A_DEGREE_NAME													AS 		DEGREE_NAME_AR,
                       	DECODE(:paramLocale,'en',SI.STATUS_NAME, SI.A_STATUS_NAME) 			AS 		STATUS_NAME,         
                       	NVL(DECODE(:paramLocale,'en',SI.MINORNAME, SI.A_MINORNAME ),'')  	AS 		MINOR_NAME ,      
                       	NVL(DECODE(:paramLocale,'en',SI.SPECNAME, SI.A_SPECNAME ),'')   	AS 		SPEC_NAME,
                       	STH.SUPVISREMPNO                                                   	AS	    SUPERVISOR_ID
           FROM        	V_STDINFO_PORTAL     SI 
                       ,STD_THESIS        STH
           WHERE       	(SI.STD_ID= :paramStudentId     OR SI.STDNO = :paramStudentNo)     
                    AND  SI.STDNO = STH.STDNO (+)
                    AND  SI.STDSTATCD = STH.STDSTATCD (+)
                    AND  ( 
                          SI.DEG_NUMBER IN (2,4,10)
                          OR (SI.DEG_NUMBER = 6 AND SI.MAJOR_CODE='PODT')
                       )
                  AND  SI.ACTIVE = 'Y'
    	 ]]>
    </entry>
    <entry key="dps.select.student.mode">
		    <![CDATA[
							SELECT 
							        DECODE(
							                  STD_MODE
							                , 'DEFAULT', 'FULL', STD_MODE
							              )
							FROM
							(
							    SELECT 
							          STD_MODE
							    FROM
							    (
							          SELECT
							                    CODES.L_ABR_CODE													AS		STD_MODE												
							          FROM
							                    SIS_CODES CODES
							                ,   STD_SPNSR SPNSR
							          WHERE
							                    SPNSR.RELEASETYPECD = CODES.SISCODECD
							                AND SPNSR.STDNO = :paramStdNo
							                AND SPNSR.STDSTATCD = :paramStdStatCode
							                AND SPNSR.FROMDTE = (
							                                        SELECT 
							                                          MAX(FROMDTE) 
							                                        FROM
							                                          STD_SPNSR
							                                        WHERE STDNO = :paramStdNo
							                                        AND   STDSTATCD = :paramStdStatCode
							                                    )  
							    
							          UNION
							          
							          SELECT 'DEFAULT'
							          FROM DUAL

							    )  
							    
							    ORDER BY STD_MODE DESC
							)
							WHERE ROWNUM < 2
			]]>    
    </entry>
    
    <entry key="dps.stored.procedure.sp.approver.next">
    	SP_APPROVER_NEXT
    </entry>
    <entry key="dps.select.student.total.registered.credit">
			SELECT 
			        SUM(CRSCRED)  AS  TOTAL_CREDIT
			FROM
			        V_STD_CURREG
			WHERE
			            STDNO       = :paramStdNo
			      AND   STDSTATCD   = :paramStdStatCode
    </entry>
    <entry key="dps.select.student.selected.registered.course.credit">
			SELECT 
			       DECODE(
				              MOD(SECTNO,10)
				              , 0, CRSCRED, 0
            		)
			FROM
			      V_STD_CURREG
			WHERE
			            STDNO = :paramStdNo
			      AND   STDSTATCD = :paramStdStatCode
			      AND   CRSNO     = :paramCourseNo  
			      AND	(
			      			:paramSectNo IS NULL
			      		OR  SECTNO = :paramSectNo
			      )  	
    </entry>
    <entry key="dps.function.is.supervisor.available">
    	SELECT 
    		FUNC_IS_SUPERVISOR_AVAILABLE(:paramStdNo,:paramStdStatCode) 
    	FROM
    		DUAL
    </entry>
    <entry key="dps.sequence.no">
		SELECT 
					DPS_SQ.NEXTVAL 	 														AS	SEQUENCE_NUMBER
		FROM 
					DUAL
	</entry>
	<entry key="dps.delegate.select.delegated">
				SELECT * FROM
				(
				SELECT DISTINCT
				      NVL(D1.DAR_TO_USERNAME,'NA')          										AS  DELEGATED
				    , TO_CHAR(D1.DAR_FROM_DATE,'DD/MM/YYYY')  										AS  DELEGATED_FROM
					    , TO_CHAR(D1.DAR_TO_DATE,'DD/MM/YYYY')    										AS  DELEGATED_TO
					FROM
					DPS_ADDITIONAL_ROLES D1, 
					DPS_ADDITIONAL_ROLES D2
					
					WHERE 
					        D1.DARM_SRL_NO (+) = D2.DARM_SRL_NO
					    AND D1.DAR_FROM_USERNAME(+) = :paramDelegatedUserName
					    AND SYSDATE BETWEEN D1.DAR_FROM_DATE(+) AND D1.DAR_TO_DATE(+)
					    AND D1.DAR_ACTIVE(+)='Y'	
		        ORDER BY DELEGATED_TO  DESC
		        )
		WHERE
		    ROWNUM = 1
	</entry>  
	<entry key="dps.delegate.select.delegatee">
		<![CDATA[
			SELECT * FROM
			(
			SELECT DISTINCT
			      NVL(D1.DAR_FROM_USERNAME,'NA')          										AS  DELEGATEE
			    , TO_CHAR(D1.DAR_FROM_DATE,'DD/MM/YYYY')  										AS  DELEGATED_FROM
			   , NVL(TO_CHAR(D1.DAR_TO_DATE,'DD/MM/YYYY'),'01/01/0000')								AS  DELEGATED_TO
			FROM
			DPS_ADDITIONAL_ROLES D1, 
			DPS_ADDITIONAL_ROLES D2
			
			WHERE 
			        D1.DARM_SRL_NO (+) = D2.DARM_SRL_NO
			    AND D1.DAR_TO_USERNAME(+) = :paramDelegatedUserName
			    AND SYSDATE BETWEEN D1.DAR_FROM_DATE(+) AND D1.DAR_TO_DATE(+)
			    AND D1.DAR_ACTIVE(+)='Y'
			ORDER BY 
	          CASE 
	            WHEN DELEGATEE='NA' THEN 100
	            ELSE 1
	          END
			  )WHERE ROWNUM < 2  
	 	]]> 		  
	</entry>
</properties>